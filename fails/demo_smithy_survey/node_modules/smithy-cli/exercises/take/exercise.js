var exercise = require('workshopper-exercise')();
var filecheck = require('workshopper-exercise/filecheck');
var execute = require('workshopper-exercise/execute');
var comparestdout = require('workshopper-exercise/comparestdout');
var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');




exercise = filecheck(exercise);
exercise = execute(exercise);

exercise.addProcessor(function(mode, cb) {
  var filename = path.join(process.cwd(), process.argv[3]);

  fs.readFile(filename, 'utf-8', function(err, data) {
    try {
      eval(data);
    } catch(e) {
      console.log(chalk.red("Sorry you had a Syntax error! make sure all your quotes are closed"));
      console.log(chalk.yellow(e.message));
      exercise.emit('fail', 'Your syntax is a little off');
      // false is fail
      return cb(void 0, false);
    }
  var sampleInput = [1,2,3,4],
  callback = function(elem) {
    return elem + 1;
  }, 
  expectedOutput = [2,3,4,5];



    if( typeof take === 'undefined') {
      exercise.emit('fail', 'Your function is undefined');
      return cb(void 0, false);
    }


    var outputmatch = [];
  // should return first element if second argument not provided
    outputmatch.push(_.isEqual(take([1, 2, 3]), [1]));

  // should remove last n elem
    outputmatch.push(_.isEqual(take([1, 2, 3], 2), [1,2]));

  // should return entire array if n is larger than array length
    outputmatch.push(_.isEqual(take([1, 2, 3], 5), [1,2,3]));

  // should return empty array if n is 0
    outputmatch.push(_.isEqual(take([1, 2, 3], 0), []));

  if(mode === 'verify') {
    if(!outputmatch.every(function(elem){ return elem; })) {
      exercise.emit('fail', 'Your take function is off');
      // false is fail
      return cb(void 0, false);
    }
      // true is pass
      cb(void 0, true);
    
  }
  });
});

module.exports = exercise;
