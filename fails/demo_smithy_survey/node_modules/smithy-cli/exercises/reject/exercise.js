var exercise = require('workshopper-exercise')();
var filecheck = require('workshopper-exercise/filecheck');
var execute = require('workshopper-exercise/execute');
var comparestdout = require('workshopper-exercise/comparestdout');
var fs = require('fs');
var path = require('path');
exercise = filecheck(exercise);
exercise = execute(exercise);
exercise.addVerifyProcessor(function(cb) {
  var filename = path.join(process.cwd(), process.argv[3]);

  fs.readFile(filename, 'utf-8', function(err, data) {
    try {
      eval(data);
    } catch(e) {
      console.log(chalk.red("Sorry you had a Syntax error! make sure all your quotes are closed"));
      console.log(chalk.yellow(e.message));
      exercise.emit('fail', 'Your syntax is a little off');
      // false is fail
      return cb(void 0, false);
    }
  var isEven = function(num) { return num % 2 === 0; };
  var isOdd1 = function(num) { return num % 2 !== 0; };
  var obj = {a:1, b:2, c:3, d:4};
  var isOdd2 = function(value, key, collection) { return value % 2 !== 0; };

  expectedOutput_odds = [1, 3, 5];
  expectedOutput_evens1 = [2, 4, 6];
  expectedOutput_evens2 = {b:2, d:4};


    var output_odds = reject([1, 2, 3, 4, 5, 6], isEven);
    var output_evens1 = reject([1, 2, 3, 4, 5, 6], isOdd1);
    var output_evens2 = reject(obj, isOdd2);

    if(typeof reject === 'undefined') {
      exercise.emit('fail', 'Make sure you name your function "reject" check the example code to make sure.');
      return cb(void 0, false);
    }

    if(JSON.stringify(output_odds) === JSON.stringify(expectedOutput_odds) && JSON.stringify(output_evens1) === JSON.stringify(expectedOutput_evens1) && JSON.stringify(output_evens2) === JSON.stringify(expectedOutput_evens2)) {
      cb(void 0, true);
    }else {
      exercise.emit('fail', 'Your foreach function is off');
      cb(void 0, false);
    }


  });

});


module.exports = exercise;
