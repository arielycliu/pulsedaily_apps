var exercise = require('workshopper-exercise')();
var filecheck = require('workshopper-exercise/filecheck');
var execute = require('workshopper-exercise/execute');
var comparestdout = require('workshopper-exercise/comparestdout');
var fs = require('fs');
var path = require('path');
exercise = filecheck(exercise);
exercise = execute(exercise);
exercise.addProcessor(function(mode, cb) {
  var filename = path.join(process.cwd(), process.argv[3]);

  fs.readFile(filename, 'utf-8', function(err, data) {
    try {
      eval(data);
    } catch(e) {
      console.log(chalk.red("Sorry you had a Syntax error! make sure all your quotes are closed"));
      console.log(chalk.yellow(e.message));
      exercise.emit('fail', 'Your syntax is a little off');
      // false is fail
      return cb(void 0, false);
    }
    var fib, fastFib, timeCheck, fastTime, wait;

    expectedOutput_fib = 55;
    expectedOutput_fastFib1 = 55;
    expectedOutput_fastFib2 = 13;


    fib = function(n) {
      if(n < 2){ return n; }
      return fib(n - 1) + fib(n - 2);
    };
    fastFib = memoize(fib);
    timeCheck = function(str) { return str + Date.now(); };
    fastTime = memoize(timeCheck);

    // Synchronous sleep: terrible for web development, awesome for testing memoize
    wait = function(t) {
      var start = Date.now();
      while ((Date.now() - start) < t){}
    };

    var firstTime = timeCheck('shazaam!');
    wait(5);
    var secondTime = fastTime('shazaam!');
    wait(5);

    expectedOutput_secondTime = secondTime;

    if(typeof memoize === 'undefined') {
      exercise.emit('fail', 'Make sure you name your function "memoize" check the example code to make sure.');
      return cb(void 0, false);
    }

    var output_fib = fib(10);
    var output_fastFib1 = fastFib(10);
    var output_fastFib2 = fastFib(7);
    var output_firstTime = firstTime;
    var output_fastTime = fastTime('shazaam!');

    if(mode === 'verify') {
      if(JSON.stringify(output_fib) === JSON.stringify(expectedOutput_fib) && JSON.stringify(output_fastFib1) === JSON.stringify(expectedOutput_fastFib1) && JSON.stringify(output_fastFib2) === JSON.stringify(expectedOutput_fastFib2) && JSON.stringify(output_fastTime) === JSON.stringify(expectedOutput_secondTime) && JSON.stringify(output_firstTime) !== JSON.stringify(expectedOutput_secondTime)) {
        return cb(void 0, true);
      }
      exercise.emit('fail', 'Your reduce function is off');
      return cb(void 0, false);
    }

  });

});

module.exports = exercise;

