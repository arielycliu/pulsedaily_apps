var exercise = require('workshopper-exercise')();
var filecheck = require('workshopper-exercise/filecheck');
var execute = require('workshopper-exercise/execute');
var comparestdout = require('workshopper-exercise/comparestdout');
var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');




exercise = filecheck(exercise);
exercise = execute(exercise);

exercise.addProcessor(function(mode, cb) {
  var filename = path.join(process.cwd(), process.argv[3]);
  fs.readFile(filename, 'utf-8', function(err, data) {
    try {
      eval(data);
    } catch(e) {
      console.log(chalk.red("Sorry you had a Syntax error! make sure all your quotes are closed"));
      console.log(chalk.yellow(e.message));
      exercise.emit('fail', 'Your syntax is a little off');
      // false is fail
      return cb(void 0, false);
    }

    if(mode === 'verify') {
    if(typeof sortBy == 'undefined'){
      exercise.emit('fail', 'Make sure you defined "sortBy" properly, remember javascript is particular about spelling and capitalization');
      return cb(void 0, false);
    }
    }
    var results = [];
    var people = [{name : 'george', age : 50}, {name : 'sam', age : 30}];
    people = sortBy(people, function(person) {
      return person.age;
    });

    var list = [undefined, 4, 1, undefined, 3, 2];
    var result = sortBy(list, function(i) { 
      return i; 
    });
    if(mode === 'verify') {
      if(!(_.isEqual(result, [1, 2, 3, 4, undefined, undefined]))){
        exercise.emit('fail', 'Your sortby function is off');
        // false is fail
        return cb(void 0, false);
      }
    }
    list = ['one', 'two', 'three', 'four', 'five'];
    var sorted = sortBy(list, function(s){
      return s.length;
    });
    if(mode === 'verify') {
      if(!(_.isEqual(sorted, ['one', 'two', 'four', 'five', 'three']))){
        exercise.emit('fail', 'Your sortby function is off');
        // false is fail
        return cb(void 0, false);
      }
    }

    function Pair(x, y) {
      this.x = x;
      this.y = y;
    }

    var collection = [
      new Pair(1, 1), new Pair(1, 2),
      new Pair(1, 3), new Pair(1, 4),
      new Pair(1, 5), new Pair(1, 6),
      new Pair(2, 1), new Pair(2, 2),
      new Pair(2, 3), new Pair(2, 4),
      new Pair(2, 5), new Pair(2, 6),
      new Pair(undefined, 1), new Pair(undefined, 2),
      new Pair(undefined, 3), new Pair(undefined, 4),
      new Pair(undefined, 5), new Pair(undefined, 6)
    ];

    var actual = sortBy(collection, function(pair) {
      return pair.x;
    });

    if(mode === 'verify') {
      if(_.isEqual(actual, collection)){
        exercise.emit('fail', 'Your sortby function is off');
        // false is fail
        return cb(void 0, false);
      }
      // true is pass
      return cb(void 0, true);
    }
  });
});

module.exports = exercise;
