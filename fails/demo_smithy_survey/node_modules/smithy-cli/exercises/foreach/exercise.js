var exercise = require('workshopper-exercise')();
var filecheck = require('workshopper-exercise/filecheck');
var execute = require('workshopper-exercise/execute');
var comparestdout = require('workshopper-exercise/comparestdout');
var fs = require('fs');
var path = require('path');
exercise = filecheck(exercise);
exercise = execute(exercise);
exercise.addProcessor(function(mode, cb) {
  var filename = path.join(process.cwd(), process.argv[3]);
  fs.readFile(filename, 'utf-8', function(err, data) {
    try {
      eval(data);
    } catch(e) {
      console.log(chalk.red("Sorry you had a Syntax error! make sure all your quotes are closed"));
      console.log(chalk.yellow(e.message));
      exercise.emit('fail', 'Your syntax is a little off');
      // false is fail
      return cb(void 0, false);
    }
    if(typeof forEach === 'undefined') {
      exercise.emit('fail', 'Make sure you name your function "forEach" check the example code to make sure. (remember, javascript is very particular about capitilzation :) )');
    return cb(void 0, false);
    }

  var input1 = ['apple', 'banana', 'carrot'];
  var output1 = [];
  callback1 = function(input1, index, list) {
    output1.push([input1, index, list]);
  };
  expectedOutput1 = [
      ['apple', 0, input1],
      ['banana', 1, input1],
      ['carrot', 2, input1]
    ];

  var input2 = ['apple', 'banana', 'carrot'];
  var output2 = [];
  input2.shouldBeIgnored = 'Ignore me!';
  callback2 = function(input2, index, list) {
    output2.push([input2, index, list]);
  };
  expectedOutput2 = [
      ['apple', 0, input2],
      ['banana', 1, input2],
      ['carrot', 2, input2]
    ];

    

    forEach(input1, callback1);
    forEach(input2, callback2);

    if(mode === 'verify') {
    if(JSON.stringify(output1) === JSON.stringify(expectedOutput1) && JSON.stringify(output2) === JSON.stringify(expectedOutput2)) {
      cb(void 0, true);
    }else {
      exercise.emit('fail', 'Your foreach function is off');
      cb(void 0, false);
    }
    }


  });

});


module.exports = exercise;
